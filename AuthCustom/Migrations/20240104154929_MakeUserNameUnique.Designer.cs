// <auto-generated />
using AuthCustom.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthCustom.Migrations
{
    [DbContext(typeof(AuthCustomContext))]
    [Migration("20240104154929_MakeUserNameUnique")]
    partial class MakeUserNameUnique
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthCustom.Models.Permiso", b =>
                {
                    b.Property<int>("IdPermisos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PkPermisos");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPermisos"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdPermisos");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Permisos");
                });

            modelBuilder.Entity("AuthCustom.Models.Rol", b =>
                {
                    b.Property<int>("IdRoles")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PkRoles");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRoles"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdRoles");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AuthCustom.Models.RolPermiso", b =>
                {
                    b.Property<int>("IdRoles")
                        .HasColumnType("int")
                        .HasColumnName("PkFkRoles");

                    b.Property<int>("IdPermisos")
                        .HasColumnType("int")
                        .HasColumnName("PkFkPermisos");

                    b.HasKey("IdRoles", "IdPermisos");

                    b.HasIndex("IdPermisos");

                    b.ToTable("RolesPermisos");
                });

            modelBuilder.Entity("AuthCustom.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuarios")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PkUsuarios");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuarios"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdUsuarios");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("AuthCustom.Models.UsuarioRol", b =>
                {
                    b.Property<int>("IdUsuarios")
                        .HasColumnType("int")
                        .HasColumnName("PkFkUsuarios");

                    b.Property<int>("IdRoles")
                        .HasColumnType("int")
                        .HasColumnName("PkFkRoles");

                    b.HasKey("IdUsuarios", "IdRoles");

                    b.HasIndex("IdRoles");

                    b.ToTable("UsuariosRoles");
                });

            modelBuilder.Entity("AuthCustom.Models.RolPermiso", b =>
                {
                    b.HasOne("AuthCustom.Models.Permiso", "Permiso")
                        .WithMany("RolesPermisos")
                        .HasForeignKey("IdPermisos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthCustom.Models.Rol", "Rol")
                        .WithMany("RolesPermisos")
                        .HasForeignKey("IdRoles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permiso");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("AuthCustom.Models.UsuarioRol", b =>
                {
                    b.HasOne("AuthCustom.Models.Rol", "Rol")
                        .WithMany("UsuariosRoles")
                        .HasForeignKey("IdRoles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthCustom.Models.Usuario", "Usuario")
                        .WithMany("UsuariosRoles")
                        .HasForeignKey("IdUsuarios")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("AuthCustom.Models.Permiso", b =>
                {
                    b.Navigation("RolesPermisos");
                });

            modelBuilder.Entity("AuthCustom.Models.Rol", b =>
                {
                    b.Navigation("RolesPermisos");

                    b.Navigation("UsuariosRoles");
                });

            modelBuilder.Entity("AuthCustom.Models.Usuario", b =>
                {
                    b.Navigation("UsuariosRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
